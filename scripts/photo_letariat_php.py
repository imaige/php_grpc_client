# scripts to modify protocol buffer files generated by gRPC_tools so that imports do not break
# an in-house alternative to protoletariat (https://github.com/cpcloud/protoletariat)
# that takes advantage of the fact that we already have most of the information we need to access files, generate text
# that matches existing and desired import statements, and make the necessary modifications to file name and file path

import re


# script to get the name of the protocol buffer files generated by grpc_tools
# when grpc_tools is used to generate files, all output files start with the same text as the .proto file_name does
# so using this script gets us the necessary prefix to which we can add _pb2(.py or .pyi) or_pb2_grpc(.py) as need
def get_protocol_buffer_file_name_pascal_php(input_proto_file_name) -> str:
    # Capture text after last slash, or all text if no slash
    # as this will live in $repo_name/scripts, in practice there should always be one
    pattern = r'([^/]+/?)?$'
    match = re.search(pattern, input_proto_file_name)
    result = match.group(0)
    # remove '.proto' extension
    # usage: this is only called from sibling generate_protos.py, where it is enforced that extension is '.proto'
    result_name = result[:-6]
    result = to_pascal_case(result_name)
    return result


def replace_pb2_import_statement_php(file_path, file_name) -> None:
    with open(file_path, 'r') as file:
        file_content = file.readlines()

    index_namespace = None

    # Find index of namespace definition
    for i, line in enumerate(file_content):
        if line.strip().startswith('namespace'):
            index_namespace = i
            break

    # If namespace found, insert user text below namespace
    if index_namespace is not None:
        file_content.insert(index_namespace + 1, '\n' + 'require "' + file_name + '"' + '\n')

    # Write the modified lines back to the file
    with open(file_path, 'w') as file:
        file.writelines(file_content)


def find_rpc_method(files_out_location, proto_file):
    package_name = None
    rpc_method = None

    with open(proto_file, 'r') as file:
        for line in file:
            if package_name is None and line.strip().startswith('package'):
                # Extracting package name
                match = re.search(r'package\s+(\w+);', line)
                if match:
                    package_name = match.group(1)
            elif rpc_method is None and line.strip().startswith('rpc'):
                # Extracting rpc method
                match = re.search(r'\((.*?)\)', line)
                if match:
                    rpc_method = match.group(1)

            if package_name and rpc_method:
                return f"{files_out_location}/{package_name}/{rpc_method}.php"

    return None


def to_pascal_case(s):
    if "_" in s:
        # snake_case to PascalCase
        return ''.join(word.capitalize() for word in s.split('_'))
    elif "-" in s:
        # kebab-case to PascalCase
        return ''.join(word.capitalize() for word in s.split('-'))
    elif any(x.isupper() for x in s):
        # camelCase or PascalCase
        return s[0].upper() + s[1:]
    else:
        # Lowercase word to PascalCase
        return s.capitalize()
